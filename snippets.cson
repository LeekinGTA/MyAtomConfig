# --------------------------------------------- C++ ------------------------------------------
'.source.cpp':
    'C++: Create Class':
      'prefix': 'classh'
      'body': """
      #ifndef __${1:name_t}_H__
      #define __${1:name_t}_H__

      class ${1:name_t} ${2:: public  ${3:BaseClass}}
      {
      private:
          typedef ${3:BaseClass} super;
      public:
          ${1:name_t} (${5:arguments});
          virtual ~${1:name_t} ();
      };
      #endif // __${1:name_t}_H__
      """
    'Create Class':
      'prefix': 'class'
      'body': '''
      class ${1:name_t} ${2:: public  ${3:BaseClass}}
      {
      private:
          typedef ${3:BaseClass} super;
      public:
          ${1:name_t} (${5:arguments});
          virtual ~${1:name_t} ();
      };
      '''
# ------------------------------------ Markdown ------------------------------------------
'.source.gfm':
    'Styled block':
      'prefix': 'class'
      'body': '''
      <!-- class="$1" -->
      $2
      <!-- endclass -->
      '''
    'Bootstrap panel':
      'prefix': 'panel'
      'body': '''
      <!-- class="panel panel-${1:default}" -->
      <!-- class="panel-heading" -->
      <!-- class="panel-title" -->
      ${2:##### }
      <!-- endclass -->
      <!-- endclass -->
      <!-- class="panel-body" -->
      $3
      <!-- endclass -->
      <!-- endclass -->
      '''
    'Bootstrap alte':
      'prefix': 'alert'
      'body': '''
      <!-- class="alert alert-${1:info}" -->
      $2
      <!-- endclass -->
      '''

    'Bootstrap List':
      'prefix': 'list'
      'body': '''
      <!-- class="list-group" -->
      <!-- class="list-group-item active" -->
      $1
      <!-- endclass -->
      <!-- class="list-group-item" -->
      $2
      <!-- endclass -->
      <!-- endclass -->
      '''

    'Bootstrap List item':
      'prefix': 'listi'
      'body': '''
      <!-- class="list-group-item" -->
      $1
      <!-- endclass -->
      '''

    'Code Highlight':
        'prefix': 'code'
        'body': """
        {% highlight ${1:c++} %}
        $2
        {% endhighlight %}
        """
    'End description':
      'prefix': 'more'
      'body': '<!-- more -->'


# ------------------------- yaml ------------------------------------
'.source.yaml':
  'New Post':
    'prefix': 'post'
    'body': '''
    - title: ${1:Title}
      publishAt: ${3:${4:2016}-${5:01}-${6:01} ${7:12}:${8:00}:${9:00}}
      file: ${10:posts/${11:filename}.md}
      categories:
        - $12
      tags:
        - $13
    '''
# --------------------------------------------- JS ------------------------------------------
'.source.js':
    'use strict':
        'prefix': 'us'
        'body': "'use strict';"
    'Import module':
      'prefix': 'im'
      'body': "import $1 from '$2'"
# ---------------- JSX --------------------
'.source.jsx':
    'React Native: Create StyleSheet':
        'prefix': 'rnss'
        'body': """
        let ${1:styles} = StyleSheet.create({
            ${2:container} : {
                $3
            },
        });
        """

    'Create react component':
        'prefix': 'rcc'
        'body': """
        class ${1} extends React.Component {
          constructor(props) {
            super(props);
            this.state = {$2};
          }

          render() {
            return (
                <${3:div}>$4</${3:div}>
            );
          }
        }
        """

    'React Native component as a module':
        'prefix': 'rnccx'
        'body': """
        import React from 'react-native';
        let {${0:StyleSheet, View}} = React;

        class ${1} extends React.Component {
          constructor(props) {
            super(props);
            this.state = {$2};
          }

          render() {
            return (
                <${3:View}>$4</${3:View}>
            );
          }
        }

        module.exports = ${1};
        """

    'React component as a module':
        'prefix': 'rccx'
        'body': """
        import React from 'react';

        class ${1} extends React.Component {
          constructor(props) {
            super(props);
            this.state = {$2};
          }

          render() {
            return (
              <${3:div}>$4</${3:div}>
            );
          }
        }

        module.exports = ${1};
        """

    'React Native: Common tags':
        'prefix': 'tag'
        'body': '<${1:View} style={${2}} ></${1:View}>'

    'React Native: Button':
        'prefix': 'btn'
        'body': """
        <${1:TouchableOpacity} style={${2}} onPress={$3} >
          $4
        </${1:TouchableOpacity}>
        """

    'Import react-native module':
        'prefix': 'imrn'
        'body': """
        import React from 'react-native';
        let { ${1:StyleSheet, View}} = React;
        """

    'Image':
        'prefix': 'img'
        'body': """
        <Image style={$1} source={$2}></Image>
        """
    'View':
        'prefix': 'vie'
        'body': """
        <View style={$1}>
          $2
        </View>
        """

    'ListView DataSource':
        'prefix': 'ds'
        'body': """
        this.ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});
        """
    'ListView':
        'prefix': 'listv'
        'body': '''
        <ListView
          style={$1}
          dataSource={${2:this.ds.cloneWithRows($3)}}
          renderRow={$4}
          onScroll={$5}
          renderFooter={$6}
        />
        '''
    'Vector Icon':
        'prefix': 'icon'
        'body': '''
        <Icon
          style={${0:{}}}
          name='$1'
          size={${2:20}}
          color={${3:'white'}}
        />
        '''
    'TextInput':
        'prefix': 'input'
        'body': '''
        <TextInput
          style={${0:{}}}
          autoCapitalize='${2:sentences}'
          multiline={${3:false}}
          placeholder="$4"
          onChangeText={${5:(text) => this.setState({text})}}
        />
        '''
